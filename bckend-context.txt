
// Sign up with email
router.post('/signup', async (req: Request, res: Response) => {
  try {
    const { email, password, metadata } = req.body;
    const result = await signUpWithEmail(email, password, metadata);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Sign in with email
router.post('/login', async (req: Request, res: Response) => {
  try {
    const { email, password } = req.body;
    const result = await signInWithEmail(email, password);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Send magic link
router.post('/magic-link', async (req: Request, res: Response) => {
  try {
    const { email } = req.body;
    const result = await sendMagicLink(email);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// OAuth sign in
router.post('/oauth/:provider', async (req: Request, res: Response) => {
  try {
    const { provider } = req.params;
    const result = await signInWithProvider(provider as 'google' | 'github');
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get current user
router.get('/user', async (req: Request, res: Response) => {
  try {
    const user = await getCurrentUser();
    res.json({ user });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Sign out
router.post('/logout', async (req: Request, res: Response) => {
  try {
    const result = await signOut();
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get session
router.get('/session', async (req: Request, res: Response) => {
  try {
    const session = await getSession();
    res.json({ session });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Check authentication
router.get('/check', async (req: Request, res: Response) => {
  try {
    const isAuth = await isAuthenticated();
    res.json({ authenticated: isAuth });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get user tier
router.get('/tier', async (req: Request, res: Response) => {
  try {
    const tier = await getUserTier();
    res.json({ tier });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Refresh session
router.post('/refresh', async (req: Request, res: Response) => {
  try {
    const result = await refreshSession();
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});


// Create checkout session
router.post('/checkout', async (req: Request, res: Response) => {
  try {
    const { tier, successUrl, cancelUrl } = req.body;
    const result = await createCheckoutSession(tier, successUrl, cancelUrl);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get user subscription
router.get('/subscription', async (req: Request, res: Response) => {
  try {
    const result = await getUserSubscription();
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Cancel subscription
router.post('/subscription/cancel', async (req: Request, res: Response) => {
  try {
    const result = await cancelSubscription();
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Resume subscription
router.post('/subscription/resume', async (req: Request, res: Response) => {
  try {
    const result = await resumeSubscription();
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Update subscription
router.post('/subscription/update', async (req: Request, res: Response) => {
  try {
    const { tier } = req.body;
    const result = await updateSubscription(tier);
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Get scan quota
router.get('/quota', async (req: Request, res: Response) => {
  try {
    const result = await getRemainingScanQuota();
    res.json(result);
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Webhook endpoint
router.post('/webhook', async (req: Request, res: Response) => {
  try {
    const sig = req.headers['stripe-signature'];
    const rawBody = req.body;

    if (!sig) {
      return res.status(400).json({ error: 'Missing stripe-signature header' });
    }

    const result = await processWebhook(req.body as Stripe.Event);

    if (!result.success) {
      return res.status(400).json({ error: result.error });
    }

    return res.json({ received: true });
  } catch (error) {
    return res.status(500).json({ error: 'Internal server error' });
  }
});